@inject IWordService WordServ
@inject IJSRuntime JS
<div class="container">
    <header>
        <h3>choose dictionary</h3>
        <button @onclick="OnCloseClick"><span class="oi oi-circle-x"></span></button>
    </header>

    <div class="DictionariesToChoose">
        @if (DictionariesToChoose.Any())
        {
            @foreach (var dictionary in DictionariesToChoose)
            {
                <div class="dictionary" @onclick="@(() => OnDictionaryClick(dictionary))">
                    <span class="dictionary-name">@dictionary.DictionaryName</span>
                    <span class="dictionary-creator">by @dictionary.Player</span>
                </div>
            }
        }
        else
        {
            <p>Loading Dictionaries...</p>
        }
    </div>
</div>

@code {

    #region properties
    //[Parameter]
    public List<Dictionary> DictionariesToChoose { get; set; } = new List<Dictionary>();

    [Parameter]
    public EventCallback<bool> OnChooseDictionary { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }
    #endregion

    #region methods
    protected override async Task OnInitializedAsync()
    {
        DictionariesToChoose = await WordServ.GetDictionaries();

        foreach (var dictionary in DictionariesToChoose)
        {
            dictionary.Player = new Player { UserName = await GetPlayerUsername(dictionary.DictionaryID) };
        }
    }

    public async Task OnDictionaryClick(Dictionary dictionary)
    {
        var words = await WordServ.GetWordsFromDictionary(dictionary.DictionaryID);

        var hasWords = words.Count > 0 ? true : false;

        if (!hasWords)
        {
            await JS.InvokeVoidAsync("show_alert", "sorry, dictionary has no words. \nselect another one");
            await OnChooseDictionary.InvokeAsync(hasWords);

            return;
        }
        else
        {
            await WordServ.SetCurrentDictionary(dictionary);
            await OnChooseDictionary.InvokeAsync(hasWords);
        }
    }

    public void OnCloseClick()
    {
        OnClose.InvokeAsync();
    }

    public async Task<string> GetPlayerUsername(int dictionaryID)
    {
        var userName = await WordServ.GetDictionaryCreator(dictionaryID);

        System.Console.WriteLine($"username => {userName}");

        return userName;
    }
    #endregion
}