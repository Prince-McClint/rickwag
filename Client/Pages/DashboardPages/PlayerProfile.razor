@page "/dashboard/profile"

@inject IAccountsService AccountService
@inject IJSRuntime JS
@inject MyAuthenticationStateProvider StateProvider
@inject NavigationManager NavManager

<div class="container">
    <h1>@Profile.Username Profile</h1>

    <EditForm Model="Profile" OnValidSubmit="SavePlayerProfile">
        <DataAnnotationsValidator />

        <fieldset>
            <label>username</label>
            <InputText @bind-Value="Profile.Username" />
        </fieldset>
        <ValidationMessage For="@(() => Profile.Username)" />

        <fieldset>
            <label>current password</label>
            <InputText type="password" @bind-Value="Profile.CurrentPassword" />
        </fieldset>
        <ValidationMessage For="@(() => Profile.CurrentPassword)" />

        <fieldset>
            <label>new password</label>
            <InputText type="password" @bind-Value="Profile.Password" />
        </fieldset>
        <ValidationMessage For="@(() => Profile.Password)" />

        <fieldset>
            <label>confirm new password</label>
            <InputText type="password" @bind-Value="Profile.ConfirmPassword" />
        </fieldset>
        <ValidationMessage For="@(() => Profile.ConfirmPassword)" />

        <button type="submit">save</button>
    </EditForm>

    <button id="delete-btn" @onclick="OnDeletePlayerAccountClick">delete account</button>

</div>

@code {
    #region properties
    public UserProfile Profile { get; set; } = new UserProfile();
    #endregion

    #region properties

    protected override async Task OnInitializedAsync()
    {
        var currentUser = await AuthStateProvider.GetCurrentUser();

        Profile.Username = currentUser.Username;
        Profile.PreviousUsername = currentUser.Username;
    }

    private async Task SavePlayerProfile()
    {
        var success = await AccountService.SavePlayerProfile(Profile);

        if (!success)
            await JS.InvokeVoidAsync("show_alert", "sorry, current password is incorrect");
        else
            await JS.InvokeVoidAsync("show_alert", "password changed successfully");

        ClearPasswordFields();
    }

    private void ClearPasswordFields()
    {
        Profile.CurrentPassword = "";
        Profile.Password = "";
        Profile.ConfirmPassword = "";
    }


    public async Task OnDeletePlayerAccountClick()
    {
        var result = await JS.InvokeAsync<bool>("show_confirm", "Do you really wanna delete your account?");

        if (result)
        {
            await StateProvider.DeleteCurrentUserAccount();
            await StateProvider.Logout();
            NavManager.NavigateTo("/");
        }
    }
    #endregion
}
